# -*- coding: utf-8 -*-
"""ExplainIt.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y5PTVjzK5rHAP3VZuCcFyw5vQNhbb2FM

# **ExplainIt Bot**

"ExplainIt" is a chatbot designed to bridge the gap between complex information and young minds. It serves as a reliable companion for youth, helping them decode challenging articles and documents, particularly those related to governance, policies, and social issues. By simplifying dense content into clear, digestible answers, ExplainIt empowers young individuals to not only understand critical topics but also engage more effectively with their communities and governments. Its mission is to foster better communication and understanding, paving the way for informed and active participation in governance.

import libraries
"""

from newspaper import Article
import random
import string
import nltk
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import nltk

nltk.download('punkt_tab')

"""Downlad the punkt package:

"""

nltk.download('punkt', quiet=True)

"""Take the information from an article"""

article=Article('https://news.gallup.com/poll/651527/party-divisions-views-supreme-court-keep-ratings-low.aspx')
article.download()
article.parse()
article.nlp()
corpus = article.text

print(corpus)

"""Tokenization"""

text = corpus
list_w =nltk.sent_tokenize(text)

print(list_w)

"""A random Greeting :"""

def random_greeting(text):
  text = text.lower()

  bot_greeting=['hru', "hi", 'hello', 'salam']
  user_greeting = ['hi', 'hello', 'hey', 'greeting']

  for word in text.split():
       if word in user_greeting:
           return random.choice(bot_greeting)

def index_sort(list_var):
  length = len(list_var)
  list_index = list(range(0, length))

  x= list_var


  for i in range (length):
    for j in range (length):
      if x[list_index[i]]>x[list_index[j]]:
        temp = list_index[i]
        list_index[i]=list_index[i]
        list_index[i]=temp
  return list_index

"""Bot responses :"""

def bot_response(user_input):
  user_input = user_input.lower()
  list_w.append(user_input)
  bot_response = ''
  cm = CountVectorizer().fit_transform(list_w)
  similarity_score = cosine_similarity(cm[-1], cm)
  similarity_score_list = similarity_score.flatten()
  index = index_sort(similarity_score_list)
  index = index[1:]
  response_flag = 0

  j = 0
  for i in range(len(index)):
    if similarity_score_list[index[i]]>0.0:
      bot_response = bot_response+' '+list_w[index[i]]
      response_flag = 1
      j = j+1
    if j>2:
      break

  if response_flag == 0:
    bot_response = bot_response+' '+'sorry, I did not get u'
    list_w.remove(user_input)
  return bot_response

"""Start the chat :"""

print(' ExplainIt : i am here to answer to ur questions about AI, if u would like to exit type bye')

exit_list=['exit','bye','chiao']

while(True):
  user_input = input()
  if user_input.lower() in exit_list:
    print('ExplainIt : bye bye chat with u soon')
    break
  else:
      if random_greeting(user_input)!=None:
       print('ExplainIt: '+random_greeting(user_input))
      else:
        print('ExplainIt: '+bot_response(user_input))

"""In a world where governance and policymaking often feel distant and complicated, ExplainIt provides a vital tool to bridge this gap. By making complex topics accessible, it helps the youth build their knowledge, ask the right questions, and engage in meaningful conversations with decision-makers. Whether itâ€™s decoding an article or answering specific queries, ExplainIt is here to empower young minds, ensuring that they are equipped to understand and communicate effectively in a rapidly evolving world."""